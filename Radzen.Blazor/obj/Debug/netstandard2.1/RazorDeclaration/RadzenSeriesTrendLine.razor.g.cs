// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Radzen.Blazor
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "E:\Dev\radzen-blazor\Radzen.Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 1 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
using Radzen.Blazor.Rendering;

#line default
#line hidden
    public partial class RadzenSeriesTrendLine : RadzenGridLines, IChartSeriesOverlay
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 5 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
       
    public RadzenSeriesTrendLine()
    {
        Visible = true;
    }

    IChartSeries series;
    [CascadingParameter]
    protected IChartSeries Series
    {
        get
        {
            return series;
        }
        set
        {
            if (value.CoordinateSystem != CoordinateSystem.Cartesian)
            {
                throw new ArgumentException($"Series must use Cartesian coordinate system");
            }
            series = value;
            if (!series.Overlays.Contains(this))
            {
                series.Overlays.Add(this);
            }
        }
    }

    public RenderFragment Render(ScaleBase categoryScale, ScaleBase valueScale)
    {
        (double a, double b) = series.GetTrend();
        double x1, x2, y1, y2;

        if (Chart.ShouldInvertAxes())
        {
            y1 = 0; y2 = Chart.ValueScale.OutputSize;
            x1 = a; x2 = (a + b * y2);

            x1 = Math.Min(Math.Max(0, x1), Chart.CategoryScale.OutputSize); 
            x2 = Math.Max(Math.Min(Chart.CategoryScale.OutputSize, x2), 0);
        }
        else
        {
            x1 = 0; x2 = Chart.CategoryScale.OutputSize;
            y1 = a; y2 = (a + b * x2);

            y1 = Math.Min(Math.Max(0, y1), Chart.ValueScale.OutputSize); 
            y2 = Math.Max(Math.Min(Chart.ValueScale.OutputSize, y2), 0);
        }

        var path = $"M{x1.ToInvariantString()} {y1.ToInvariantString()} L{x2.ToInvariantString()} {y2.ToInvariantString()} ";

        return
        

#line default
#line hidden
        (__builder2) => {
            __builder2.OpenElement(0, "g");
            __builder2.AddMarkupContent(1, "\r\n            ");
            __builder2.OpenElement(2, "Path");
            __builder2.AddAttribute(3, "@key", 
#line 59 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
                          $"{path}-{Chart.Series.IndexOf(series)}"

#line default
#line hidden
            );
            __builder2.AddAttribute(4, "D", 
#line 59 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
                                                                         path

#line default
#line hidden
            );
            __builder2.AddAttribute(5, "Stroke", 
#line 59 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
                                                                                        Stroke

#line default
#line hidden
            );
            __builder2.AddAttribute(6, "StrokeWidth", 
#line 59 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
                                                                                                              StrokeWidth

#line default
#line hidden
            );
            __builder2.AddAttribute(7, "LineType", 
#line 59 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
                                                                                                                                      LineType

#line default
#line hidden
            );
            __builder2.CloseElement();
            __builder2.AddMarkupContent(8, "\r\n        ");
            __builder2.CloseElement();
            __builder2.AddMarkupContent(9, "\r\n");
        }
#line 61 "E:\Dev\radzen-blazor\Radzen.Blazor\RadzenSeriesTrendLine.razor"
    ;
    }

    public bool Contains(double mouseX, double mouseY, int tolerance)
    {
        return false;
    }

    public RenderFragment RenderTooltip(double mouseX, double mouseY, double marginLeft, double marginTop)
    {
        return null;
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
